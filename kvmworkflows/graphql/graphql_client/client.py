# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, Dict, List, Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .deactivate_subscription import DeactivateSubscription
from .delete_entry_tags import DeleteEntryTags
from .delete_subscriptions_by_pk import DeleteSubscriptionsByPk
from .get_active_subscriptions_by_interval import GetActiveSubscriptionsByInterval
from .get_entries_by_filters import GetEntriesByFilters
from .get_entry_tags import GetEntryTags
from .get_exact_subscriptions import GetExactSubscriptions
from .input_types import (
    entries_insert_input,
    entry_tags_insert_input,
    tags_insert_input,
)
from .insert_entry_tags import InsertEntryTags
from .insert_subscriptions_one import InsertSubscriptionsOne
from .insert_tags import InsertTags
from .upsert_entries import UpsertEntries


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def get_entries_by_filters(
        self,
        create_at_gte: Any,
        create_at_lte: Any,
        lat_gte: Any,
        lat_lte: Any,
        lon_gte: Any,
        lon_lte: Any,
        limit: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetEntriesByFilters:
        query = gql(
            """
            query GetEntriesByFilters($create_at_gte: timestamptz!, $create_at_lte: timestamptz!, $lat_gte: numeric!, $lat_lte: numeric!, $lon_gte: numeric!, $lon_lte: numeric!, $limit: Int = 10) {
              entries(
                order_by: {updated_at: desc}
                where: {_and: {created_at: {_gte: $create_at_gte, _lte: $create_at_lte}, lat: {_gte: $lat_gte, _lte: $lat_lte}, lng: {_gte: $lon_gte, _lte: $lon_lte}}}
                limit: $limit
              ) {
                created_at
                description
                id
                lat
                lng
                status
                title
                title
                updated_at
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "create_at_gte": create_at_gte,
            "create_at_lte": create_at_lte,
            "lat_gte": lat_gte,
            "lat_lte": lat_lte,
            "lon_gte": lon_gte,
            "lon_lte": lon_lte,
            "limit": limit,
        }
        response = await self.execute(
            query=query,
            operation_name="GetEntriesByFilters",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetEntriesByFilters.model_validate(data)

    async def upsert_entries(
        self,
        objects: Union[Optional[List[entries_insert_input]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpsertEntries:
        query = gql(
            """
            mutation UpsertEntries($objects: [entries_insert_input!] = {}) {
              insert_entries(
                objects: $objects
                on_conflict: {constraint: entries_pkey, update_columns: [id, status, lat, lng, title, description]}
              ) {
                affected_rows
              }
            }
            """
        )
        variables: Dict[str, object] = {"objects": objects}
        response = await self.execute(
            query=query, operation_name="UpsertEntries", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpsertEntries.model_validate(data)

    async def insert_tags(
        self,
        tags: Union[Optional[List[tags_insert_input]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> InsertTags:
        query = gql(
            """
            mutation InsertTags($tags: [tags_insert_input!] = {}) {
              insert_tags(
                objects: $tags
                on_conflict: {constraint: tags_pkey, update_columns: []}
              ) {
                affected_rows
              }
            }
            """
        )
        variables: Dict[str, object] = {"tags": tags}
        response = await self.execute(
            query=query, operation_name="InsertTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InsertTags.model_validate(data)

    async def get_entry_tags(self, eq: str, **kwargs: Any) -> GetEntryTags:
        query = gql(
            """
            query GetEntryTags($_eq: String!) {
              entry_tags(where: {entry: {_eq: $_eq}}) {
                tag
              }
            }
            """
        )
        variables: Dict[str, object] = {"_eq": eq}
        response = await self.execute(
            query=query, operation_name="GetEntryTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetEntryTags.model_validate(data)

    async def insert_entry_tags(
        self,
        objects: Union[Optional[List[entry_tags_insert_input]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> InsertEntryTags:
        query = gql(
            """
            mutation InsertEntryTags($objects: [entry_tags_insert_input!] = {}) {
              insert_entry_tags(
                objects: $objects
                on_conflict: {constraint: entry_tags_pkey, update_columns: []}
              ) {
                affected_rows
              }
            }
            """
        )
        variables: Dict[str, object] = {"objects": objects}
        response = await self.execute(
            query=query, operation_name="InsertEntryTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InsertEntryTags.model_validate(data)

    async def delete_entry_tags(
        self, entry: str, tag: str, **kwargs: Any
    ) -> DeleteEntryTags:
        query = gql(
            """
            mutation DeleteEntryTags($entry: String!, $tag: String!) {
              delete_entry_tags_by_pk(entry: $entry, tag: $tag) {
                entry
                tag
              }
            }
            """
        )
        variables: Dict[str, object] = {"entry": entry, "tag": tag}
        response = await self.execute(
            query=query, operation_name="DeleteEntryTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteEntryTags.model_validate(data)

    async def get_exact_subscriptions(
        self,
        email: str,
        interval: str,
        lat_min: Any,
        lon_min: Any,
        lat_max: Any,
        lon_max: Any,
        subscription_type: Any,
        language: str,
        is_active: Union[Optional[bool], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetExactSubscriptions:
        query = gql(
            """
            query GetExactSubscriptions($email: String!, $interval: String!, $lat_min: numeric!, $lon_min: numeric!, $lat_max: numeric!, $lon_max: numeric!, $subscription_type: subscription_enum!, $language: String!, $is_active: Boolean = true) {
              subscriptions(
                where: {_and: {email: {_eq: $email}, interval: {_eq: $interval}, lat_min: {_eq: $lat_min}, lon_min: {_eq: $lon_min}, lat_max: {_eq: $lat_max}, lon_max: {_eq: $lon_max}, subscription_type: {_eq: $subscription_type}, language: {_eq: $language}, is_active: {_eq: $is_active}}}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "email": email,
            "interval": interval,
            "lat_min": lat_min,
            "lon_min": lon_min,
            "lat_max": lat_max,
            "lon_max": lon_max,
            "subscription_type": subscription_type,
            "language": language,
            "is_active": is_active,
        }
        response = await self.execute(
            query=query,
            operation_name="GetExactSubscriptions",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetExactSubscriptions.model_validate(data)

    async def get_active_subscriptions_by_interval(
        self, interval: str, subscription_type: Any, **kwargs: Any
    ) -> GetActiveSubscriptionsByInterval:
        query = gql(
            """
            query GetActiveSubscriptionsByInterval($interval: String!, $subscription_type: subscription_enum!) {
              subscriptions(
                where: {interval: {_eq: $interval}, subscription_type: {_eq: $subscription_type}}
              ) {
                email
                id
                interval
                language
                lat_max
                lat_min
                lon_max
                lon_min
                subscription_type
                title
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "interval": interval,
            "subscription_type": subscription_type,
        }
        response = await self.execute(
            query=query,
            operation_name="GetActiveSubscriptionsByInterval",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetActiveSubscriptionsByInterval.model_validate(data)

    async def insert_subscriptions_one(
        self,
        title: str,
        interval: str,
        email: str,
        lat_min: Any,
        lon_min: Any,
        lat_max: Any,
        lon_max: Any,
        subscription_type: Any,
        language: str,
        **kwargs: Any
    ) -> InsertSubscriptionsOne:
        query = gql(
            """
            mutation InsertSubscriptionsOne($title: String!, $interval: String!, $email: String!, $lat_min: numeric!, $lon_min: numeric!, $lat_max: numeric!, $lon_max: numeric!, $subscription_type: subscription_enum!, $language: String!) {
              insert_subscriptions_one(
                object: {title: $title, interval: $interval, email: $email, lat_min: $lat_min, lon_min: $lon_min, lat_max: $lat_max, lon_max: $lon_max, subscription_type: $subscription_type, language: $language}
              ) {
                id
                title
                email
                interval
                lat_min
                lon_min
                lat_max
                lon_max
                subscription_type
                language
                is_active
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "title": title,
            "interval": interval,
            "email": email,
            "lat_min": lat_min,
            "lon_min": lon_min,
            "lat_max": lat_max,
            "lon_max": lon_max,
            "subscription_type": subscription_type,
            "language": language,
        }
        response = await self.execute(
            query=query,
            operation_name="InsertSubscriptionsOne",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InsertSubscriptionsOne.model_validate(data)

    async def delete_subscriptions_by_pk(
        self, id: Any, **kwargs: Any
    ) -> DeleteSubscriptionsByPk:
        query = gql(
            """
            mutation DeleteSubscriptionsByPk($id: uuid!) {
              delete_subscriptions_by_pk(id: $id) {
                id
                title
                email
                interval
                lat_min
                lon_min
                lat_max
                lon_max
                subscription_type
                last_email_sent_at
                n_emails_sent
                language
                is_active
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="DeleteSubscriptionsByPk",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteSubscriptionsByPk.model_validate(data)

    async def deactivate_subscription(
        self, id: Any, **kwargs: Any
    ) -> DeactivateSubscription:
        query = gql(
            """
            mutation DeactivateSubscription($id: uuid!) {
              update_subscriptions_by_pk(pk_columns: {id: $id}, _set: {is_active: false}) {
                id
                title
                email
                interval
                lat_min
                lon_min
                lat_max
                lon_max
                subscription_type
                last_email_sent_at
                n_emails_sent
                language
                is_active
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="DeactivateSubscription",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeactivateSubscription.model_validate(data)
