# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, Dict, List, Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .input_types import entries_insert_input, tags_insert_input
from .insert_entries import InsertEntries
from .insert_tags import InsertTags


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def insert_entries(
        self,
        objects: Union[Optional[List[entries_insert_input]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> InsertEntries:
        query = gql(
            """
            mutation InsertEntries($objects: [entries_insert_input!] = {}) {
              insert_entries(
                objects: $objects
                on_conflict: {constraint: entries_pkey, update_columns: [id, status, lat, long, title, description]}
              ) {
                affected_rows
              }
            }
            """
        )
        variables: Dict[str, object] = {"objects": objects}
        response = await self.execute(
            query=query, operation_name="InsertEntries", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InsertEntries.model_validate(data)

    async def insert_tags(
        self,
        tags: Union[Optional[List[tags_insert_input]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> InsertTags:
        query = gql(
            """
            mutation InsertTags($tags: [tags_insert_input!] = {}) {
              insert_tags(
                objects: $tags
                on_conflict: {constraint: tags_pkey, update_columns: []}
              ) {
                affected_rows
              }
            }
            """
        )
        variables: Dict[str, object] = {"tags": tags}
        response = await self.execute(
            query=query, operation_name="InsertTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InsertTags.model_validate(data)
