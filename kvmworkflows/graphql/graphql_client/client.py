# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, Dict, List, Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .delete_entry_tags import DeleteEntryTags
from .get_entry_tags import GetEntryTags
from .input_types import (
    entries_insert_input,
    entry_tags_insert_input,
    tags_insert_input,
)
from .insert_entry_tags import InsertEntryTags
from .insert_search_entries import InsertSearchEntries
from .insert_tags import InsertTags


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def insert_search_entries(
        self,
        objects: Union[Optional[List[entries_insert_input]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> InsertSearchEntries:
        query = gql(
            """
            mutation InsertSearchEntries($objects: [entries_insert_input!] = {}) {
              insert_entries(
                objects: $objects
                on_conflict: {constraint: entries_pkey, update_columns: [id, status, lat, lng, title, description]}
              ) {
                affected_rows
              }
            }
            """
        )
        variables: Dict[str, object] = {"objects": objects}
        response = await self.execute(
            query=query,
            operation_name="InsertSearchEntries",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InsertSearchEntries.model_validate(data)

    async def insert_tags(
        self,
        tags: Union[Optional[List[tags_insert_input]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> InsertTags:
        query = gql(
            """
            mutation InsertTags($tags: [tags_insert_input!] = {}) {
              insert_tags(
                objects: $tags
                on_conflict: {constraint: tags_pkey, update_columns: []}
              ) {
                affected_rows
              }
            }
            """
        )
        variables: Dict[str, object] = {"tags": tags}
        response = await self.execute(
            query=query, operation_name="InsertTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InsertTags.model_validate(data)

    async def get_entry_tags(self, eq: str, **kwargs: Any) -> GetEntryTags:
        query = gql(
            """
            query GetEntryTags($_eq: String!) {
              entry_tags(where: {entry: {_eq: $_eq}}) {
                tag
              }
            }
            """
        )
        variables: Dict[str, object] = {"_eq": eq}
        response = await self.execute(
            query=query, operation_name="GetEntryTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetEntryTags.model_validate(data)

    async def insert_entry_tags(
        self,
        objects: Union[Optional[List[entry_tags_insert_input]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> InsertEntryTags:
        query = gql(
            """
            mutation InsertEntryTags($objects: [entry_tags_insert_input!] = {}) {
              insert_entry_tags(
                objects: $objects
                on_conflict: {constraint: entry_tags_pkey, update_columns: []}
              ) {
                affected_rows
              }
            }
            """
        )
        variables: Dict[str, object] = {"objects": objects}
        response = await self.execute(
            query=query, operation_name="InsertEntryTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InsertEntryTags.model_validate(data)

    async def delete_entry_tags(
        self, entry: str, tag: str, **kwargs: Any
    ) -> DeleteEntryTags:
        query = gql(
            """
            mutation DeleteEntryTags($entry: String!, $tag: String!) {
              delete_entry_tags_by_pk(entry: $entry, tag: $tag) {
                entry
                tag
              }
            }
            """
        )
        variables: Dict[str, object] = {"entry": entry, "tag": tag}
        response = await self.execute(
            query=query, operation_name="DeleteEntryTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteEntryTags.model_validate(data)
